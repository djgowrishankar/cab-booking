{"ast":null,"code":"var _jsxFileName = \"D:\\\\Cabbooking\\\\Real-Time-Taxi-App\\\\client\\\\src\\\\contexts\\\\ResponsesProvider.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport useLocalStorage from '../hooks/useLocalStorage';\nimport { useRequests } from '../contexts/RequestsProvider';\nimport { useSocket } from './SocketProvider';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResponseContext = /*#__PURE__*/React.createContext();\nexport function useResponses() {\n  _s();\n\n  return useContext(ResponseContext);\n}\n\n_s(useResponses, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport function ResponsesProvider(_ref) {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [responses, setResponses] = useLocalStorage('responses', []);\n\n  function createResponses(passengersId, id, driversPhoto, driversName, carsPlateNo, completed) {\n    setResponses(prevResponse => {\n      if (prevResponse != null) {\n        return [...prevResponse, {\n          passengersId,\n          id,\n          driversPhoto,\n          driversName,\n          carsPlateNo,\n          completed\n        }];\n      } else {\n        return [{\n          passengersId,\n          id,\n          driversPhoto,\n          driversName,\n          carsPlateNo,\n          completed\n        }];\n      }\n    }); //sendResponses(passengerId, id, driversPhoto, driversName, carsPlateNo)\n    // after setting responses, start a conversation between the driver and the passenger\n    // \n  }\n\n  function communication() {//socket.emit('request-accepted', (passengerId, id, start, end, accepted))\n  }\n\n  function sendResponses(passengerId, id, driversPhoto, driversName, carsPlateNo) {//socket.emit(passengerId, id, driversPhoto, driversName, carsPlateNo)\n  }\n\n  return /*#__PURE__*/_jsxDEV(ResponseContext.Provider, {\n    value: {\n      responses,\n      createResponses\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(ResponsesProvider, \"LeqIBh0NyjOqfE3JJ/xUPGYAqSA=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = ResponsesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResponsesProvider\");","map":{"version":3,"sources":["D:/Cabbooking/Real-Time-Taxi-App/client/src/contexts/ResponsesProvider.js"],"names":["React","useContext","useLocalStorage","useRequests","useSocket","ResponseContext","createContext","useResponses","ResponsesProvider","children","responses","setResponses","createResponses","passengersId","id","driversPhoto","driversName","carsPlateNo","completed","prevResponse","communication","sendResponses","passengerId"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;;AACA,MAAMC,eAAe,gBAAGL,KAAK,CAACM,aAAN,EAAxB;AAEA,OAAO,SAASC,YAAT,GAAwB;AAAA;;AAC3B,SAAON,UAAU,CAACI,eAAD,CAAjB;AACH;;GAFeE,Y;;AAIhB,OAAO,SAASC,iBAAT,OAAyC;AAAA;;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AAC5C,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BT,eAAe,CAAC,WAAD,EAAc,EAAd,CAAjD;;AAEA,WAASU,eAAT,CAA0BC,YAA1B,EAAwCC,EAAxC,EAA4CC,YAA5C,EAA0DC,WAA1D,EAAuEC,WAAvE,EAAoFC,SAApF,EAAgG;AAC5FP,IAAAA,YAAY,CAAEQ,YAAY,IAAI;AAC1B,UAAIA,YAAY,IAAI,IAApB,EAAyB;AACrB,eAAO,CAAE,GAAGA,YAAL,EAAmB;AAAEN,UAAAA,YAAF;AAAgBC,UAAAA,EAAhB;AAAoBC,UAAAA,YAApB;AAAkCC,UAAAA,WAAlC;AAA+CC,UAAAA,WAA/C;AAA4DC,UAAAA;AAA5D,SAAnB,CAAP;AACH,OAFD,MAEO;AACH,eAAO,CAAC;AAAEL,UAAAA,YAAF;AAAgBC,UAAAA,EAAhB;AAAoBC,UAAAA,YAApB;AAAkCC,UAAAA,WAAlC;AAA+CC,UAAAA,WAA/C;AAA4DC,UAAAA;AAA5D,SAAD,CAAP;AACH;AAEJ,KAPW,CAAZ,CAD4F,CAS5F;AACA;AACA;AACH;;AAED,WAASE,aAAT,GAAyB,CACrB;AAEH;;AACD,WAASC,aAAT,CAAuBC,WAAvB,EAAoCR,EAApC,EAAwCC,YAAxC,EAAsDC,WAAtD,EAAmEC,WAAnE,EAAgF,CAC5E;AACH;;AAED,sBACI,QAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAE;AAAEP,MAAAA,SAAF;AAAaE,MAAAA;AAAb,KAAjC;AAAA,cACMH;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;IA9BeD,iB;UACsBN,e;;;KADtBM,iB","sourcesContent":["import React, { useContext } from 'react';\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\nimport { useRequests } from '../contexts/RequestsProvider'\r\nimport { useSocket } from './SocketProvider';\r\nconst ResponseContext = React.createContext();\r\n\r\nexport function useResponses() {\r\n    return useContext(ResponseContext);\r\n}\r\n\r\nexport function ResponsesProvider({ children }) {\r\n    const [responses, setResponses] = useLocalStorage('responses', []);\r\n\r\n    function createResponses( passengersId, id, driversPhoto, driversName, carsPlateNo, completed ) {\r\n        setResponses( prevResponse => {\r\n            if (prevResponse != null){\r\n                return [ ...prevResponse, { passengersId, id, driversPhoto, driversName, carsPlateNo, completed }];\r\n            } else {\r\n                return [{ passengersId, id, driversPhoto, driversName, carsPlateNo, completed }];\r\n            }\r\n            \r\n        });\r\n        //sendResponses(passengerId, id, driversPhoto, driversName, carsPlateNo)\r\n        // after setting responses, start a conversation between the driver and the passenger\r\n        // \r\n    }\r\n    \r\n    function communication() {\r\n        //socket.emit('request-accepted', (passengerId, id, start, end, accepted))\r\n        \r\n    }\r\n    function sendResponses(passengerId, id, driversPhoto, driversName, carsPlateNo) {\r\n        //socket.emit(passengerId, id, driversPhoto, driversName, carsPlateNo)\r\n    }\r\n\r\n    return (\r\n        <ResponseContext.Provider value={{ responses, createResponses }}>\r\n            { children}\r\n        </ResponseContext.Provider>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}